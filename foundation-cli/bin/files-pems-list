#!/bin/bash
# 
# files-pems-list
# 
# author: dooley@tacc.utexas.edu
#
# This script is part of the Agave API command line interface (CLI).
# It provides a mechanism for discovering user permissions on a file or folder.
#

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$DIR/common.sh"

# Script logic -- TOUCH THIS {{{

# A list of all variables to prompt in interactive mode. These variables HAVE
# to be named exactly as the longname option definition in usage().
interactive_opts=(apisecret apikey)

# Print usage
usage() {
  echo -n "$(basename $0) [OPTION]... [JOB_ID]

List the user permissions associated with a file or folder. These permissions
are set at the API level and do not reflect *nix or other file system ACL.

 Options:
  -z, --access_token	Access token
  -S, --systemId	Specify the system id
  -H, --hosturl     URL of the service
  -d, --development Run in dev mode using default dev server
  -f, --force       Skip all user interaction
  -i, --interactive Prompt for values
  -q, --quiet       Quiet (no output)
  -v, --verbose     Verbose output
  -V, --veryverbose Very verbose output
  -h, --help        Display this help and exit
      --version     Output version information and exit
"
}

##################################################################
##################################################################
#						Begin Script Logic						 #
##################################################################
##################################################################

source "$DIR/files-common.sh"

main() {
	#echo -n
	#set -x
	
	if [ -n "$systemId" ]; then
		filesurl="${hosturl}pems/system/${systemId}/${args}?pretty=true"
	else
		filesurl="${hosturl}pems/${args}?pretty=true"
	fi

	cmd="curl -sk -H \"${authheader}\" ${filesurl}"

	if ((veryverbose)); then
		log "Calling $cmd"
	fi
	
	response=`curl -sk -H "${authheader}" "${filesurl}"`

	if [[ $(jsonquery "$response" "status") = 'success' ]]; then
		format_api_json "$response"
	else
		errorresponse=$(jsonquery "$response" "message")
		err "$errorresponse"
	fi
	
}

format_api_json() {

	if ((veryverbose)); then
		echo "$1"
	elif [[ $verbose -eq 1 ]]; then
		result=$(jsonquery "$1" "result" 1)
		echo "${result}" | python -mjson.tool
	else
		#result=$(jsonquery "$1" "result.[].username")
		#echo "${result}"

		pemusers=( $(jsonquery "$1" "result.[].username") )
		
		n=0
		for i in $(jsonquery "$1" "result.[].permission.read")
		do
			if [[ "$i" = 'rue' ]]; then
				canread='READ '
			else
				canread=''
			fi
			pemusers[$n]="${pemusers[$n]} $canread"
			n=$[n+1]
		done
		
		n=0
		for i in $(jsonquery "$1" "result.[].permission.write")
		do
			if [[ "$i" = 'rue' ]]; then
				canwrite='WRITE '
			else
				canwrite=''
			fi
			pemusers[$n]="${pemusers[$n]}$canwrite"
			n=$[n+1]
		done
		
		n=0
		for i in $(jsonquery "$1" "result.[].permission.write")
		do
			if [[ "$i" = 'rue' ]]; then
				canexecute='EXECUTE '
			else
				canexecute=''
			fi
			pemusers[$n]="${pemusers[$n]}$canexecute"
			n=$[n+1]
		done
		
		for i in "${pemusers[@]}"; do
			echo "$i"
		done
	fi
}

##################################################################
##################################################################
#						End Script Logic						 #
##################################################################
##################################################################

# }}}

# Parse command line options
source "$DIR/options.sh"


# Main loop {{{

# Print help if no arguments were passed.
#[[ $# -eq 0 ]] && set -- "--help"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -h|--help) usage >&2; safe_exit ;;
    --version) version; copyright; disclaimer; safe_exit ;;
    -z|--access_token) shift; access_token=$1 ;;
    -S|--systemId) shift; systemId=$1 ;;
    -H|--hosturl) shift; hosturl=$1;;
  	-d|--development) development=1 ;;
    -v|--verbose) verbose=1 ;;
    -V|--veryverbose) veryverbose=1; verbose=1 ;;
    -q|--quiet) quiet=1 ;;
    -i|--interactive) interactive=1 ;;
    -f|--force) force=1 ;;
    --endopts) shift; break ;;
    *) die "invalid option: $1" ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")

# }}}

# Run the script logic
source "$DIR/runner.sh"

