#!/bin/bash
# 
# metadata-addupdate
# 
# author: dooley@tacc.utexas.edu
#
# This script is part of the Agave API command line interface (CLI).
# It adds a notification.
#

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$DIR/common.sh"

# Script logic -- TOUCH THIS {{{

# A list of all variables to prompt in interactive mode. These variables HAVE
# to be named exactly as the longname option definition in usage().
interactive_opts=(apisecret apikey filetoupload)

# Print usage
usage() {
  echo -n "$(basename $0) [OPTION]...
$(basename $0) [OPTION]... [METADATA_ID]

Subscribe for a notification about an event in the API. Notifications require
a valid, existing, Agave UUID, event, and callback in the form of a URL or 
email address. The needed information can be passed in as a file containing
information as a JSON object or via command line arguments IF the -F option is used, then 

 Options:
  -z, --access_token	Access token
  -F, --filetoupload The file containing the json app description to submit
  -U, --url 	The callback url or email address for this notification
  -E, --event	The event about which to send notifications.
  -P, --persistent	Whether this event should expire after the first occurance.
  -A, --associatedUuid	The uuid of the object for which this notification applies.
  -H, --hosturl     URL of the service
  -d, --development Run in dev mode using default dev server
  -f, --force       Skip all user interaction
  -i, --interactive Prompt for values
  -q, --quiet       Quiet (no output)
  -v, --verbose     Verbose output
  -V, --veryverbose Very verbose output
  -h, --help        Display this help and exit
      --version     Output version information and exit
"
}

##################################################################
##################################################################
#						Begin Script Logic						 #
##################################################################
##################################################################

source "$DIR/notifications-common.sh"

main() {
	#echo -n
	#set -x
	
	if [[ -n "$filetoupload" ]]; then
		cmd="curl -sk -H \"${authheader}\" -X POST -F \"fileToUpload=@$filetoupload\" ${hosturl}$args?pretty=true"

		if ((veryverbose)); then
			log "Calling $cmd"
		fi
	
		response=`curl -sk -H "${authheader}" -X POST -F "fileToUpload=@$filetoupload" "${hosturl}$args?pretty=true"`
	
	else 
	
		if [[ -z "url" ]]; then
			err "Please specify a url or email address to which the notification will be sent"
		fi
		
		if [[ -z "event" ]]; then
			err "Please specify an event upon which the notification will be sent"
		fi
		
		if [[ -z "associatedUuid" ]]; then
			err "Please specify an associatedUuid for which the notification will be sent"
		fi
		
		if [[ -z "persistent" ]]; then
			persistent="false"
		fi
			
		cmd="curl -sk -H \"${authheader}\" -X POST -d \"event=${event}&persistent=${persistent}&associatedUuid=${associatedUuid}&url=${url}\" ${hosturl}$args?pretty=true"

		if ((veryverbose)); then
			log "Calling $cmd"
		fi
	
		response=`curl -sk -H "${authheader}" -X POST -d "event=${event}&persistent=${persistent}&associatedUuid=${associatedUuid}&url=${url}" "${hosturl}$args?pretty=true"`
	fi
	
	if [[ $(jsonquery "$response" "status") = 'success' ]]; then
		result=$(format_api_json "$response")
		success "$result"
	else
		errorresponse=$(jsonquery "$response" "message")
		err "$errorresponse"
	fi
}

format_api_json() {

	if ((veryverbose)); then
		echo "$1"
	elif [[ $verbose -eq 1 ]]; then
		result=$(jsonquery "$1" "result" 1)
		echo "${result}" | python -mjson.tool
	else
		jsonval oid "$i" "id"
		success "Successfully submitted notification $oid"
	fi
}

##################################################################
##################################################################
#						End Script Logic						 #
##################################################################
##################################################################

# }}}

# Parse command line options
source "$DIR/options.sh"


# Main loop {{{

# Print help if no arguments were passed.
[[ $# -eq 0 ]] && set -- "-i"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -h|--help) usage >&2; safe_exit ;;
    --version) version; copyright; disclaimer; safe_exit ;;
    -z|--access_token) shift; access_token=$1 ;;
    -F|--filetoupload) shift; filetoupload=$1 ;;
    -U|--url) shift; url=$1 ;;
    -E|--event) shift; event=$1 ;;
    -P|--persistent) shift; persistent=$1 ;;
    -A|--associatedUuid) shift; associatedUuid=$1 ;;
    -H|--hosturl) shift; hosturl=$1;;
  	-d|--development) development=1 ;;
    -v|--verbose) verbose=1 ;;
    -V|--veryverbose) veryverbose=1; verbose=1 ;;
    -q|--quiet) quiet=1 ;;
    -i|--interactive) interactive=1 ;;
    -f|--force) force=1 ;;
    --endopts) shift; break ;;
    *) die "invalid option: $1" ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")

# }}}

# Run the script logic
source "$DIR/runner.sh"
