#!/bin/bash
# 
# auth-tokens-create.sh
# 
# author: dooley@tacc.utexas.edu
#
# This script is part of the Agave API command line interface (CLI).
# It retrieves an authentication token from the auth service that
# can be used to authenticate to the rest of the api. A valid API 
# secret and key must be used to obtain a token.
#

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$DIR/common.sh"

# set to 1 to prevent using cache. token creation requires a valid key
disable_cache=1
storetoken=0

# Script logic -- TOUCH THIS {{{

# A list of all variables to prompt in interactive mode. These variables HAVE
# to be named exactly as the longname option definition in usage().
interactive_opts=(apisecret apikey username password)

# Print usage
usage() {
  echo -n "$(basename $0) [OPTION]...

Obtain a new oauth bearer token. Tokens can be used repeatedly until they 
expire at which point you can simply do an oauth-renew with your API 
username and password to refresh your token. This step is required to 
interact with any Agave services

For ease of use, the -S option can be specified to store the new 
credential for reuse in subsequent calls to the API.

 Options:
  -u, --username    Agave tenant username
  -p, --password    Agave tenant passwordxwxw
  -s, --apisecret   Consumer secret
  -k, --apikey      Consumer Key
  -x, --proxyuser   API username for whom the returned token should apply, requires admin permissions
  -S, --storetoken  Store the token for later use so you can work without reauthenticating on every command.
  -H, --hosturl     URL of the service
  -d, --development Run in dev mode using default dev server
  -f, --force       Skip all user interaction
  -i, --interactive Prompt for values
  -q, --quiet       Quiet (no output)
  -v, --verbose     Verbose output
  -V, --veryverbose Very verbose output
  -h, --help        Display this help and exit
      --version     Output version information and exit
"
}

##################################################################
##################################################################
#						Begin Script Logic						 #
##################################################################
##################################################################

source "$DIR/auth-common.sh"

main() {
	#echo -n
	#set -x
	#hosturl=https://agave.iplantc.org/token
	local post_options="grant_type=client_credentials&username=${username}&password=${password}&scope=PRODUCTION"
	
	# if [ -n "$tenant" ]; then
# 		post_options="tenant=${tenant}"
# 	fi
# 	
# 	if [ -n "$proxyuser" ]; then
# 		post_options="enduser=${proxyuser}&${post_options}"
# 	fi
	#
	#post_options=${post_options%&}
	
	cmd="curl -sku \"$apikey:XXXXXX\" -X POST -d \"grant_type=client_credentials&username=${username}&password=XXXXXX&scope=PRODUCTION\" -H \"Content-Type:application/x-www-form-urlencoded\" ${hosturl%/}"

	if ((veryverbose)); then
		log "Calling $cmd"
	fi
		
	response=`curl -sku "$apikey:$apisecret" -X POST -d "$post_options" -H "Content-Type:application/x-www-form-urlencoded" "${hosturl%/}" | python -mjson.tool`
	
	if [[ $(jsonquery "$response" "token_type") = 'bearer' ]]; then
		result=$(format_api_json "$response")
		success "$result"
	else
		err "$response"
	fi
	
	
}

format_api_json() {
	
	if ((storetoken)); then
		# if [ -n "$proxyuser" ]; then
# 			apisecret=$apiusername;
# 		fi
		jsonval access_token "$1" "access_token" 
		jsonval refresh_token "$1" "refresh_token" 
		jsonval expires_in "$1" "expires_in" 
		created_at=`date +%s`
		echo "{\"apisecret\":\"$apisecret\",\"apikey\":\"$apikey\",\"username\":\"$username\",\"access_token\":\"$access_token\",\"refresh_token\":\"$refresh_token\",\"created_at\":\"$created_at\",\"expires_in\":\"$expires_in\"}" > ~/.agave
		
		lifetime=$(jsonquery "$1" "expires_in")
		echo "Token successfully refreshed and cached for ${lifetime} seconds";
	fi	
		
	if ((veryverbose)); then
		echo "${1}"
	elif [[ $verbose -eq 1 ]]; then
		echo "${1}" | python -mjson.tool
	else
		result=$(jsonquery "$1" "access_token")
		echo "${result}"
	fi
}

##################################################################
##################################################################
#						End Script Logic						 #
##################################################################
##################################################################

# }}}

# Parse command line options
source "$DIR/options.sh"


# Main loop {{{

# Print help if no arguments were passed.
[[ $# -eq 0 ]] && set -- "-i"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -h|--help) usage >&2; safe_exit ;;
    --version) version; copyright; disclaimer; safe_exit ;;
    -u|--username) shift; username=$1 ;;
  	-p|--password) shift; password=$1 ;;  	
	-s|--apisecret) shift; apisecret=$1 ;;
    -k|--apikey) shift; apikey=$1 ;;
    -x|--proxyuser) shift; proxyuser=$1;;
	-S|--storetoken) storetoken=1 ;;
	-H|--hosturl) shift; hosturl=$1;;
  	-d|--development) development=1 ;;
    -v|--verbose) verbose=1 ;;
    -V|--veryverbose) veryverbose=1; verbose=1 ;;
    -q|--quiet) quiet=1 ;;
    -i|--interactive) interactive=1 ;;
    -f|--force) force=1 ;;
    --endopts) shift; break ;;
    *) die "invalid option: $1" ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")

# }}}

# Run the script logic
source "$DIR/runner.sh"

